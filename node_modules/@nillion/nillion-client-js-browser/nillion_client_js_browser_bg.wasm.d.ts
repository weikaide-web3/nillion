/* tslint:disable */
/* eslint-disable */
export function __wbg_loaderhelper_free(a: number): void;
export function loaderhelper_mainJS(a: number): number;
export function worker_entry_point(a: number): void;
export function __wbg_publicvariable_free(a: number): void;
export function publicvariable_new_integer(a: number, b: number, c: number): void;
export function publicvariable_new_unsigned_integer(a: number, b: number, c: number): void;
export function publicvariable_to_integer(a: number, b: number): void;
export function __wbg_publicvariables_free(a: number): void;
export function publicvariables_new(a: number): void;
export function publicvariables_insert(a: number, b: number, c: number, d: number): void;
export function publicvariables_length(a: number): number;
export function __wbg_programbindings_free(a: number): void;
export function programbindings_new(a: number, b: number, c: number): void;
export function programbindings_add_input_party(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function programbindings_add_output_party(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_clusterdescriptor_free(a: number): void;
export function clusterdescriptor_id(a: number, b: number): void;
export function clusterdescriptor_parties(a: number, b: number): void;
export function clusterdescriptor_prime(a: number, b: number): void;
export function clusterdescriptor_kappa(a: number): number;
export function clusterdescriptor_preprocessing(a: number): number;
export function __wbg_preprocessingconfig_free(a: number): void;
export function preprocessingconfig_lambda(a: number): number;
export function preprocessingconfig_alpha(a: number): number;
export function preprocessingconfig_compare(a: number): number;
export function preprocessingconfig_division_integer_secret(a: number): number;
export function preprocessingconfig_modulo(a: number): number;
export function preprocessingconfig_share_to_particle(a: number): number;
export function preprocessingconfig_public_output_equality(a: number): number;
export function preprocessingconfig_truncpr(a: number): number;
export function __wbg_preprocessingprotocolconfig_free(a: number): void;
export function preprocessingprotocolconfig_batch_size(a: number): number;
export function __wbg_secret_free(a: number): void;
export function secret_new_integer(a: number, b: number, c: number): void;
export function secret_new_unsigned_integer(a: number, b: number, c: number): void;
export function secret_new_blob(a: number, b: number): number;
export function secret_to_byte_array(a: number, b: number): void;
export function secret_to_integer(a: number, b: number): void;
export function __wbg_secrets_free(a: number): void;
export function secrets_insert(a: number, b: number, c: number, d: number): void;
export function __wbg_nodekey_free(a: number): void;
export function nodekey_from_seed(a: number, b: number): number;
export function nodekey_from_base58(a: number, b: number): number;
export function __wbg_userkey_free(a: number): void;
export function userkey_generate(): number;
export function userkey_from_seed(a: number, b: number, c: number): void;
export function userkey_public_key(a: number, b: number): void;
export function userkey_from_base58(a: number, b: number, c: number): void;
export function userkey_to_base58(a: number, b: number): void;
export function __wbg_nillionclient_free(a: number): void;
export function nillionclient_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function nillionclient_enable_remote_logging(): void;
export function nillionclient_party_id(a: number, b: number): void;
export function nillionclient_user_id(a: number, b: number): void;
export function nillionclient_store_secrets(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function nillionclient_retrieve_secret(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function nillionclient_update_secrets(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function nillionclient_delete_secrets(a: number, b: number, c: number, d: number, e: number): number;
export function nillionclient_compute(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function nillionclient_compute_result(a: number, b: number, c: number): number;
export function nillionclient_retrieve_permissions(a: number, b: number, c: number, d: number, e: number): number;
export function nillionclient_update_permissions(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function nillionclient_store_program(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function nillionclient_cluster_information(a: number, b: number, c: number): number;
export function nillionclient_enable_tracking(a: number, b: number, c: number): void;
export function nillionclient_build_version(a: number): void;
export function __wbg_permissions_free(a: number): void;
export function permissions_new(): number;
export function permissions_default_for_user(a: number, b: number, c: number, d: number): number;
export function permissions_add_retrieve_permissions(a: number, b: number, c: number, d: number): void;
export function permissions_add_update_permissions(a: number, b: number, c: number, d: number): void;
export function permissions_add_delete_permissions(a: number, b: number, c: number, d: number): void;
export function permissions_add_compute_permissions(a: number, b: number, c: number): void;
export function permissions_is_retrieve_allowed(a: number, b: number, c: number): number;
export function permissions_is_update_allowed(a: number, b: number, c: number): number;
export function permissions_is_delete_allowed(a: number, b: number, c: number): number;
export function permissions_is_compute_allowed(a: number, b: number, c: number, d: number, e: number): number;
export function secrets_length(a: number): number;
export function secrets_new(a: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_3: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke1_mut__h2fed68bc4612ded8(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__hba14ce934dce0051(a: number, b: number): void;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h34802d39eb00c353(a: number, b: number, c: number, d: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_thread_destroy(a: number, b: number): void;
export function __wbindgen_start(): void;
